<?php

namespace sndsgd\http\task;

use \RecursiveDirectoryIterator as RDI;
use \RecursiveIteratorIterator as RII;
use \ReflectionClass;
use \SplFileInfo;
use \sndsgd\Classname;
use \sndsgd\Env;
use \sndsgd\field\BooleanField;
use \sndsgd\field\StringField;
use \sndsgd\fs\File;


class RouteTask extends \sndsgd\Task
{
   const DESCRIPTION = "A utility for managing routes";
   const VERSION = "1.0.0";

   /**
    * @var array<string,\genome\model\Route>
    */
   protected $routes = [];

   /**
    * @var array<string,\genome\model\UserRole>
    */
   protected $userRoles = [];

   /**
    * {@inheritdoc}
    */
   public function __construct(array $fields = [])
   {
      parent::__construct($fields);
      $this->addFields([
         (new StringField("filename"))
            ->addAliases("f")
            ->setDescription("the resulting filename relative to the app directory"),
         (new StringField("path-match"))
            ->addAliases("m")
            ->setDescription("a regex for including/excluding route paths")
      ]);
   }

   public function run()
   {
      $options = $this->exportValues();
      var_dump($options);

      exit;

      $this->routes = $this->findRoutes($doctrine);
      

      $contents = $this->createRouteConfigContents();
      if ($options["update"]) {
         Env::log("updating routes config... ");
         $file = new File(APP_DIR."/init/routes.php");
         if (!$file->write($contents)) {
            Env::log("\n");
            Env::err("failed to update routes; ".$file->getError()."\n");
         }
         Env::log("@[green]done@[reset]\n");
      }
   }

   private function loadUserRoles($doctrine)
   {
      // $query = $doctrine->createQuery(
      //    "SELECT r FROM genome\\model\\user\\Role r"
      // );
      // $results = $query->getResult();
      // foreach ($results as $role) {
      //    $this->userRoles[$role->getDescription()] = $role;
      // }
   }

   /**
    * Find routes by examining the filesystem
    * 
    * @return array<genome\model\Route>
    */
   private function findRoutes($doctrine)
   {
      $ret = [];
      $dirs = [
         __DIR__."/../request",
         APP_DIR."/src/request"
      ];
      foreach ($dirs as $dir) {
         if (!file_exists($dir)) {
            continue;
         }

         $iterator = new RII(new RDI($dir, RDI::SKIP_DOTS), RII::SELF_FIRST);
         foreach ($iterator as $file) {
            if (($route = $this->getRouteFromFile($file))) {
               $combo = $route->getMethod().":".$route->getPath();
               if ($this->routeExists($route)) {
                  Env::log("@[yellow] ~@[reset] $combo\n");
               }
               else {
                  Env::log("@[green] +@[reset] $combo\n");
                  // $doctrine->persist($route);
                  // $doctrine->flush();
               }
               $ret[$combo] = $route;
            }
         }
      }
      return $ret;
   }

   /**
    * @param SplFileInfo $file The file to test
    * @return \genome\model\Route|null
    */
   private function getRouteFromFile(SplFileInfo $file)
   {
      if (
         $file->isFile() &&
         strcasecmp("php", $file->getExtension()) === 0 &&
         ($file = new File($file->getRealPath())) &&
         ($contents = $file->read()) &&
         ($class = Classname::fromContents($contents))
      ) {
         $rc = new ReflectionClass($class);
         if (!$rc->isAbstract() && $rc->isSubclassOf("genome\\Request")) {
            return Route::createFromClassname($class);
         }
      }
      return null;
   }

   private function routeExists(Route $route)
   {
      // $doctrine = Container::get("doctrine");
      // $model = get_class($route);
      // $query = $doctrine->createQuery(
      //    "SELECT r FROM $model r 
      //    WHERE r.path = :path AND r.method = :method"
      // );
      // $query->setParameter("path", $route->getPath());
      // $query->setParameter("method", $route->getMethod());
      // return $query->getOneOrNullResult();
   }

   private function createRouteConfigContents()
   {
      $content = 
         "<?php\n\n".
         "# generated by ".__CLASS__."\n\n".
         "use \FastRoute\RouteCollector;\n\n".
         "return \FastRoute\cachedDispatcher(function(RouteCollector \$r) {\n\n";

      foreach ($this->routes as $route) {
         $method = var_export($route->getMethod(), true);
         $path = var_export($route->getPath(), true);
         $handler = var_export($route->getHandler(), true);
         $content .= "   \$r->addRoute($method, $path, $handler);\n";
      }

      $content .= 
         "\n".
         "}, [\n".
         '   "cacheFile" => APP_DIR."/data/route.cache",'.PHP_EOL.
         '   "cacheDisabled" => $_SERVER["SERVER_ENVIRONMENT"] !== "prod"'.PHP_EOL.
         "]);\n\n";
      return $content;
   }
}

